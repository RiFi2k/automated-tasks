#!/usr/bin/env bash
# {{ ansible_managed }}

# Include config
source {{ www_root }}/.tasks/sites.sh

# Filenames
NOW=$(date +%Y-%m-%d-%H%M)

for i in ${SITES[@]}
do
	cd "$ROOT/$i/backup"
	# Backup uploads directory
	tar -zcf "$i-uploads-${NOW}.tar.gz" -C ../shared uploads
	{% if not backup_google_cloud_storage -%}
    # Remove old backups
    find "$ROOT/$i/backup" -mtime +{{ backup_local_lifecycle_days }} | xargs rm -fR
    {% endif %}
	{% if backup_google_cloud_storage and backup_gcs_parallel_composite_upload and not backup_gcs_keep_local_backups -%}
	# Send to Google Cloud Storage
	gsutil -o GSUtil:parallel_composite_upload_threshold=150M mv -c -L "$ROOT/$i/logs/backup.log" "$ROOT/$i/backup/*" "gs://{{ backup_gcs_bucket_name }}/$i/"
	{% endif %}
	{% if backup_google_cloud_storage and not backup_gcs_parallel_composite_upload and not backup_gcs_keep_local_backups -%}
    # Send to Google Cloud Storage
    gsutil mv -c -L "$ROOT/$i/logs/backup.log" "$ROOT/$i/backup/*" "gs://{{ backup_gcs_bucket_name }}/$i/"
    {% endif %}
	{% if backup_google_cloud_storage and backup_gcs_parallel_composite_upload and backup_gcs_keep_local_backups -%}
	# Remove old backups
    find "$ROOT/$i/backup" -mtime +{{ backup_local_lifecycle_days }} | xargs rm -fR
	# Send to Google Cloud Storage
	gsutil -o GSUtil:parallel_composite_upload_threshold=150M cp -c -L "$ROOT/$i/logs/backup.log" "$ROOT/$i/backup/*" "gs://{{ backup_gcs_bucket_name }}/$i/"
	{% endif %}
	{% if backup_google_cloud_storage and not backup_gcs_parallel_composite_upload and backup_gcs_keep_local_backups -%}
	# Remove old backups
    find "$ROOT/$i/backup" -mtime +{{ backup_local_lifecycle_days }} | xargs rm -fR
    # Send to Google Cloud Storage
    gsutil cp -c -L "$ROOT/$i/logs/backup.log" "$ROOT/$i/backup/*" "gs://{{ backup_gcs_bucket_name }}/$i/"
    {% endif %}
done